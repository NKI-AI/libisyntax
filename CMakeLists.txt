cmake_minimum_required(VERSION 3.22)
project(libisyntax)

set(CMAKE_C_STANDARD 17)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
message(STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")

if(CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|aarch64)")
    message(STATUS "Enabling ARM NEON support")
    add_compile_options(-mfpu=neon)
endif()

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_SOURCE_DIR}")

include_directories("${CMAKE_SOURCE_DIR}/src")
include_directories("${CMAKE_SOURCE_DIR}/src/platform")
include_directories("${CMAKE_SOURCE_DIR}/src/utils")
include_directories("${CMAKE_SOURCE_DIR}/src/isyntax")
include_directories("${CMAKE_SOURCE_DIR}/src/third_party")

find_package(Threads REQUIRED)
if (UNIX AND NOT APPLE) # needed for sem_wait, etc.
    find_library(RT_LIBRARY rt)
    set(EXTRA_LIBS ${RT_LIBRARY})
elseif (APPLE)
    # No extra libraries needed for macOS
elseif (WIN32)
    # No extra libraries needed for Windows
endif ()

set(LIBISYNTAX_COMMON_SOURCE_FILES
        src/libisyntax.c
        src/isyntax/isyntax.c
        src/isyntax/isyntax_reader.c
        src/utils/timerutils.c
        src/utils/block_allocator.c
        src/utils/benaphore.c
        src/platform/platform.c
        src/platform/work_queue.c
        src/third_party/yxml.c
        src/third_party/ltalloc.cc
)

find_package(Threads REQUIRED)
if (UNIX AND NOT APPLE) # needed for sem_wait, etc.
    find_library(RT_LIBRARY rt)
    set(EXTRA_LIBS ${RT_LIBRARY})
elseif (APPLE)
    # No extra libraries needed for macOS
elseif (WIN32)
    # No extra libraries needed for Windows
endif ()

if (WIN32)
    set(LIBISYNTAX_COMMON_SOURCE_FILES ${LIBISYNTAX_COMMON_SOURCE_FILES} src/platform/win32_utils.c)
else()
    set(LIBISYNTAX_COMMON_SOURCE_FILES ${LIBISYNTAX_COMMON_SOURCE_FILES} src/platform/linux_utils.c)
endif()

add_library(libisyntax
        ${LIBISYNTAX_COMMON_SOURCE_FILES}
)

add_executable(isyntax_example
        src/isyntax_example.c
        ${LIBISYNTAX_COMMON_SOURCE_FILES}
)

if (WIN32)
    target_link_libraries(libisyntax winmm Threads::Threads)
    target_link_libraries(isyntax_example winmm Threads::Threads)
else()
    target_link_libraries(libisyntax Threads::Threads ${EXTRA_LIBS})
    target_link_libraries(isyntax_example Threads::Threads ${EXTRA_LIBS})
endif()
